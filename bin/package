#!/usr/bin/env bash

set -e

function cleanup() {
    # get rid of the virtualenv
    echo "Cleaning up"
    deactivate
    rm -rf "${VENV_NAME:?}/" build/ dist/ include/ local/ share/ gdc-client.spec
}

function compress() {
    # this way it's cross platform
    local zip_name=$1
    local binary_name=$2

    # python will complain about new indentation
    # if you line it up with the function
    python -c "
from zipfile import ZipFile
with ZipFile('${zip_name}', 'w') as z:
    z.write('${binary_name}')"
}

while getopts ":d" opt; do
    case $opt in
        d)
            DATE=$(date "+%m_%d_%Y")
            ;;
        \?)
            echo "Invalid option: -$OPTARG" >&2
            ;;
	esac
done

VENV_NAME="venv"
BINARY_NAME="gdc-client"
VENV_PATH="$VENV_NAME/bin/activate"

case $(uname -s) in
    *NT*)
        # for use in git bash with all the nice unix utilities
        TARGET_ENVIRONMENT="Windows"
        BINARY_NAME="gdc-client.exe"

        #  this works in git bash
        alias python="winpty python"

        # why does windows have to be so different?
        VENV_PATH="$VENV_NAME/Scripts/activate"

        # Presumably Python3 is the only `python` in the Windows %PATH% variable
        python -m virtualenv "$VENV_NAME"
        source "$VENV_PATH"
        pip install pywin32
        ;;
    *Linux*)
        TARGET_ENVIRONMENT="Ubuntu"
        python -m virtualenv "$VENV_NAME" --python=python3
        source "$VENV_PATH"
        ;;
    *Darwin*)
        TARGET_ENVIRONMENT="OSX"
        python -m virtualenv "$VENV_NAME" --python=python3
        source "$VENV_PATH"
        ;;
esac

# setup.py is in previous dir
cd ..

python -m pip install -r requirements.txt
python setup.py install

# go back go the ./gdc_client/bin dir
cd bin

echo "Building for ${TARGET_ENVIRONMENT}..."

# Make sure the correct version of pyinstaller and setuptools are installed
pip install -U "PyInstaller==3.5"

# Ran into ModuleNotFoundError: No module named 'pkg_resources.py2_warn' with higher versions of setuptools
pip install --upgrade 'setuptools<45.0.0'

# Get version
VERSION=$(python -c "
import gdc_client.version
print(gdc_client.version.__version__)")

echo "Creating ${TARGET_ENVIRONMENT} package for version ${VERSION}..."

# Create binary
pyinstaller \
    --clean \
    --additional-hooks-dir=. \
    --noconfirm \
    --onefile \
    -c gdc-client

echo "Testing produced binary..."
./dist/$BINARY_NAME --help

# Zip dist
echo "Zipping binary..."
cd dist

PRE_ZIP_NAME="gdc-client_${VERSION}_${TARGET_ENVIRONMENT}_x64"
if [ -n "${DATE}" ]; then
    PRE_ZIP_NAME="gdc-client_${VERSION}_${DATE}_${TARGET_ENVIRONMENT}_x64"
fi

ZIP_NAME="$PRE_ZIP_NAME.zip"
echo "The output zip file will be called ${ZIP_NAME}"
compress "$ZIP_NAME" "$BINARY_NAME"
mv "$ZIP_NAME" ..
cd ..

cleanup
export GDC_CLIENT_ZIP="$PRE_ZIP_NAME"
